#!/usr/bin/env python
from __future__ import print_function
# -*- coding: latin1 -*-


__author__ = 'Herbert OLiveira Rocha'

# From Python
import sys
import re
import commands
import os
import argparse


# From JFORTES
from modules.get_data_claims import GetDataClaims
from modules.get_data_claims import ClaimsTranslate

class Jfortes(object):

    def __init__(self):
        self.ABS_PATH = os.path.dirname(__file__)
        self.javaFilePath = ""
        self.javaClassPath = ""
        self.setTranslationTest = False
        self.list_tmp_files = []



    def load_java_path(self, javafile, javaClassPath):
        """
        This method loads the java file to run ESC/Java
        :param javafile: The path of the java file
        :return : The result of the ESC/Java execution
        """
        self.javaFilePath = javafile
        self.javaClassPath = javaClassPath
        return self.run_esc_java(self.javaFilePath)


    def run_esc_java(self, javafile):
        """
        This method executes the ESC/Java that receives as input the javafile,
        and then it saves the ESC/Java output in the file.escout
        :param javafile: The path of the java file
        :return outPathEscJava: The ESC/Java output saved in the file
        """
        # WARNNING to run ESCJ
	    # Set also in the bashrc
        # escj -ClassPath /usr/lib/java/jdk1.5.0_22/bin/  test_cases/primary_tests/Bag.java
        #savePathFile = javafile
        outPathEscJava = javafile.replace(".java",".escout")
        self.list_tmp_files.append(outPathEscJava)
        esc_result_status = commands.getoutput("escj -ClassPath "+self.javaClassPath+" "+javafile+" &> "+outPathEscJava)


        return outPathEscJava



    def gather_data_claims(self, escJavaOutPut):
        """
        Gather the data from claims generated by ESC/Java
        :param escJavaOutPut: The output from ESC/Java
        :return: File with the data gathered from ESC/Java output
        """
        # Gather the data claim
        getData = GetDataClaims.GetDataClaims()
        getData.readFile(escJavaOutPut)

        outPathDataClaims = self.javaFilePath.replace(".java","_claims.csv")
        self.list_tmp_files.append(outPathDataClaims)

        fileClaims = open(outPathDataClaims, "w")

        fileClaims.write( getData.writeHeader2Csv() )
        # Lines of the file with the claims translated
        for line in getData.getDataClaims():
            fileClaims.write(line+"\n")

        fileClaims.close()

        return outPathDataClaims


    def translate_claims(self, claimsFile):
        translateCl = ClaimsTranslate.IsolateDataClaim()

        if self.setTranslationTest:
            translateCl.set_testing_flag()

        translateCl.loadDataFromCsv(claimsFile,self.javaFilePath)
        translateCl.generateScopeByLineNumber(self.javaFilePath)
        translateCl.getObjectPointed()


    def delete_tmp_files(self):
        for pathFile in self.list_tmp_files:
            os.remove(pathFile)



# -------------------------------------------------
# Main JFORTES program
# -------------------------------------------------

if __name__ == "__main__":

    # TODO: Create a verify settings like map2check

    # --- Parse args options
    parser = argparse.ArgumentParser(description='Run JFORTES v1')
    parser.add_argument('-v','--version', action='version' , version="version 1")
    parser.add_argument(dest='inputJavaProgram', metavar='file.java', type=str,
               help='the Java program file to be analyzed')
    parser.add_argument('-t','--translation-test', action="store_true" , dest='setTranslationTest',
               help='run jfortes only to test the translation of the claims, where the ouput is as following: '
                    'Program ; NOT translation ; INCOMPLETE translation ; FAILED translation ; OKAY translation', default=False)
    args = parser.parse_args()

    # --- Check options in the args
    if args.inputJavaProgram:
        if not os.path.isfile(args.inputJavaProgram):
            print('Error: unable to open input file (%s)' % args.inputJavaProgram)
            parser.parse_args(['-h'])
            sys.exit()
        else:

            runJfortes = Jfortes()
            getLoad = runJfortes.load_java_path(os.path.abspath(args.inputJavaProgram), "/usr/lib/java/jdk1.5.0_22/bin/")
            getDataClaim = runJfortes.gather_data_claims(getLoad)

            if args.setTranslationTest:
                runJfortes.setTranslationTest = True

            runJfortes.translate_claims(getDataClaim)
            # Clean all tmp files generated
            runJfortes.delete_tmp_files()


